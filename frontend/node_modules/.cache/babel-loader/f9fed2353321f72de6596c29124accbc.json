{"ast":null,"code":"import axiosInterceptor from './custom.axios-interceptor';\nimport TokenService from \"./token.service\";\nconst API_URL = \"http://localhost:3001/api/authenticate/\";\n\nconst login = (username, password) => {\n  const credentials = {\n    username,\n    password\n  };\n  console.log(\"Sending Login Request\");\n  return axiosInterceptor.post(API_URL + 'login', credentials).then(response => {\n    // expecting an access token\n    if (response.data.accessToken) {\n      TokenService.setUser(response.data);\n    }\n\n    return response.data;\n  }); // passes on potential error received in axios interceptor when login is unsuccessful\n};\n\nconst logout = () => {\n  TokenService.removeUser();\n};\n\nconst register = (username, password) => {\n  const credentials = {\n    username,\n    password\n  };\n  console.log(\"Sending Registration Request\");\n  return axiosInterceptor.post(API_URL + \"register\", credentials).then(response => {\n    if (response.data.accessToken) {\n      TokenService.setUser(response.data); // logs user in upon successful registration\n    }\n\n    return response.data;\n  });\n};\n\nconst getCurrentUser = () => {\n  return TokenService.getUser();\n};\n\nconst AuthService = {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};\nexport default AuthService;","map":{"version":3,"sources":["/mnt/c/Users/frenk/Documents/GitHub/Fantasy-Basketball-Helper-App/frontend/src/services/auth.service.js"],"names":["axiosInterceptor","TokenService","API_URL","login","username","password","credentials","console","log","post","then","response","data","accessToken","setUser","logout","removeUser","register","getCurrentUser","getUser","AuthService"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,MAAMC,OAAO,GAAG,yCAAhB;;AAGA,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpC,QAAMC,WAAW,GAAG;AAClBF,IAAAA,QADkB;AAElBC,IAAAA;AAFkB,GAApB;AAIAE,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,SAAOR,gBAAgB,CAACS,IAAjB,CAAsBP,OAAO,GAAG,OAAhC,EAAyCI,WAAzC,EACJI,IADI,CACCC,QAAQ,IAAI;AAAE;AAClB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAlB,EAA+B;AAC7BZ,MAAAA,YAAY,CAACa,OAAb,CAAqBH,QAAQ,CAACC,IAA9B;AACD;;AAED,WAAOD,QAAQ,CAACC,IAAhB;AACD,GAPI,CAAP,CANoC,CAa9B;AACP,CAdD;;AAgBA,MAAMG,MAAM,GAAG,MAAM;AACnBd,EAAAA,YAAY,CAACe,UAAb;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,CAACb,QAAD,EAAWC,QAAX,KAAwB;AACvC,QAAMC,WAAW,GAAG;AAClBF,IAAAA,QADkB;AAElBC,IAAAA;AAFkB,GAApB;AAIAE,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,SAAOR,gBAAgB,CAACS,IAAjB,CAAsBP,OAAO,GAAG,UAAhC,EAA4CI,WAA5C,EACJI,IADI,CACCC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAlB,EAA+B;AAC7BZ,MAAAA,YAAY,CAACa,OAAb,CAAqBH,QAAQ,CAACC,IAA9B,EAD6B,CACQ;AACtC;;AAED,WAAOD,QAAQ,CAACC,IAAhB;AACD,GAPI,CAAP;AAQD,CAdD;;AAgBA,MAAMM,cAAc,GAAG,MAAM;AAC3B,SAAOjB,YAAY,CAACkB,OAAb,EAAP;AACD,CAFD;;AAKA,MAAMC,WAAW,GAAG;AAClBH,EAAAA,QADkB;AAElBd,EAAAA,KAFkB;AAGlBY,EAAAA,MAHkB;AAIlBG,EAAAA;AAJkB,CAApB;AAOA,eAAeE,WAAf","sourcesContent":["import axiosInterceptor from './custom.axios-interceptor';\r\nimport TokenService from \"./token.service\";\r\n\r\nconst API_URL = \"http://localhost:3001/api/authenticate/\";\r\n\r\n\r\nconst login = (username, password) => {\r\n  const credentials = {\r\n    username,\r\n    password\r\n  };\r\n  console.log(\"Sending Login Request\");\r\n  return axiosInterceptor.post(API_URL + 'login', credentials)\r\n    .then(response => { // expecting an access token\r\n      if (response.data.accessToken) {\r\n        TokenService.setUser(response.data);\r\n      }\r\n\r\n      return response.data;\r\n    }); // passes on potential error received in axios interceptor when login is unsuccessful\r\n};\r\n\r\nconst logout = () => {\r\n  TokenService.removeUser();\r\n};\r\n\r\nconst register = (username, password) => {\r\n  const credentials = {\r\n    username,\r\n    password\r\n  };\r\n  console.log(\"Sending Registration Request\");\r\n  return axiosInterceptor.post(API_URL + \"register\", credentials)\r\n    .then(response => {\r\n      if (response.data.accessToken) {\r\n        TokenService.setUser(response.data); // logs user in upon successful registration\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return TokenService.getUser();\r\n};\r\n\r\n\r\nconst AuthService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n};\r\n\r\nexport default AuthService;"]},"metadata":{},"sourceType":"module"}