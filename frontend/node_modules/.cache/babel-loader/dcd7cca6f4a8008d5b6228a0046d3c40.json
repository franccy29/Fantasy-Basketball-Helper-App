{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./token.service\";\nconst API_URL = \"http://localhost:3001/api\";\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  // Does stuff before request is sent\n  console.log(\"Intercepting Request\");\n  const token = TokenService.getAccessToken();\n\n  if (token) {\n    // config.headers[\"Authorization\"] = 'Bearer ' + token;\n    config.headers[\"x-access-token\"] = 'Bearer ' + token; // for Express back-end\n  }\n\n  return config;\n}, error => {\n  console.log(\"Interceptor Request Error\");\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Any status code within the range of 2xx triggers this function\n  return response;\n}, function (err) {\n  // Any status codes that falls outside the range of 2xx triggers this function\n  const originalRequest = err.config;\n\n  if (originalRequest.url !== \"/authenticate/login\" && err.response) {\n    // excludes response errors from unsuccessful login attempts\n    // Access Token was expired\n    if (err.response.status === 401 && originalRequest.url === API_URL + '/authenticate/token') {\n      // 401 when no refreshToken is sent)\n      // TO DO: Redirect to login page upon unsuccessfully refreshing token (try using history package or context api)\n      return Promise.reject(err);\n    }\n\n    if (err.response.status === 403 && !originalRequest._retry) {\n      // api sends status 403 when accessToken can't be verified\n      originalRequest._retry = true; // retry flag ensures that this interceptor doesn't infinitely retry requesting for a new access token\n\n      const refreshToken = TokenService.getRefreshToken();\n      return axiosInstance.post('/authenticate/token', {\n        \"token\": refreshToken\n      }) // backend expects body with \"token\" property\n      .then(res => {\n        if (res.status === 201) {\n          // status 201 because new resource was made (i.e. new access token)\n          const {\n            accessToken\n          } = res.data;\n          TokenService.updateAccessToken(accessToken);\n          axiosInstance.defaults.headers.common['x-access-token'] = 'Bearer ' + TokenService.getAccessToken(); // access token is a bearer-type token\n\n          return axiosInstance(originalRequest); // re-attempts original request now with the new access token\n        }\n      }).catch(_error => {\n        return Promise.reject(_error);\n      });\n    }\n  }\n\n  return Promise.reject(err);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/mnt/c/Users/frenk/Documents/GitHub/Fantasy-Basketball-Helper-App/frontend/src/services/custom.axios-interceptor.js"],"names":["axios","TokenService","API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","console","log","token","getAccessToken","error","Promise","reject","response","err","originalRequest","url","status","_retry","refreshToken","getRefreshToken","post","then","res","accessToken","data","updateAccessToken","defaults","common","catch","_error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,MAAMC,OAAO,GAAG,2BAAhB;AACA,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEH,OADwB;AAEjCI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFwB,CAAb,CAAtB;AAOAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAwCC,MAAD,IAAY;AAAG;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEA,QAAMC,KAAK,GAAGZ,YAAY,CAACa,cAAb,EAAd;;AACA,MAAID,KAAJ,EAAW;AACT;AACAH,IAAAA,MAAM,CAACJ,OAAP,CAAe,gBAAf,IAAmC,YAAYO,KAA/C,CAFS,CAE6C;AACvD;;AAED,SAAOH,MAAP;AACD,CAVD,EAUIK,KAAD,IAAW;AACZJ,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,SAAOI,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAbD;AAeAZ,aAAa,CAACI,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CAAwC,UAASS,QAAT,EAAmB;AAAE;AAC3D,SAAOA,QAAP;AACD,CAFD,EAEG,UAASC,GAAT,EAAc;AAAE;AACjB,QAAMC,eAAe,GAAGD,GAAG,CAACT,MAA5B;;AAEA,MAAIU,eAAe,CAACC,GAAhB,KAAwB,qBAAxB,IAAiDF,GAAG,CAACD,QAAzD,EAAmE;AAAE;AACnE;AACA,QAAIC,GAAG,CAACD,QAAJ,CAAaI,MAAb,KAAwB,GAAxB,IAA+BF,eAAe,CAACC,GAAhB,KAAyBnB,OAAO,GAAG,qBAAtE,EAA8F;AAAE;AAC9F;AACA,aAAOc,OAAO,CAACC,MAAR,CAAeE,GAAf,CAAP;AACD;;AAED,QAAIA,GAAG,CAACD,QAAJ,CAAaI,MAAb,KAAwB,GAAxB,IAA+B,CAACF,eAAe,CAACG,MAApD,EAA4D;AAAE;AAC5DH,MAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB,CAD0D,CAC3B;;AAE/B,YAAMC,YAAY,GAAGvB,YAAY,CAACwB,eAAb,EAArB;AACA,aAAOtB,aAAa,CAACuB,IAAd,CAAmB,qBAAnB,EAA0C;AAAE,iBAASF;AAAX,OAA1C,EAAqE;AAArE,OACJG,IADI,CACCC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACN,MAAJ,KAAe,GAAnB,EAAwB;AAAE;AACxB,gBAAM;AAAEO,YAAAA;AAAF,cAAkBD,GAAG,CAACE,IAA5B;AACA7B,UAAAA,YAAY,CAAC8B,iBAAb,CAA+BF,WAA/B;AAEA1B,UAAAA,aAAa,CAAC6B,QAAd,CAAuB1B,OAAvB,CAA+B2B,MAA/B,CAAsC,gBAAtC,IAA0D,YAAYhC,YAAY,CAACa,cAAb,EAAtE,CAJsB,CAI+E;;AACrG,iBAAOX,aAAa,CAACiB,eAAD,CAApB,CALsB,CAKiB;AACxC;AACF,OATI,EASFc,KATE,CASKC,MAAD,IAAY;AACnB,eAAOnB,OAAO,CAACC,MAAR,CAAekB,MAAf,CAAP;AACD,OAXI,CAAP;AAYD;AACF;;AAED,SAAOnB,OAAO,CAACC,MAAR,CAAeE,GAAf,CAAP;AACD,CAhCD;AAkCA,eAAehB,aAAf","sourcesContent":["import axios from \"axios\";\r\nimport TokenService from \"./token.service\";\r\n\r\nconst API_URL = \"http://localhost:3001/api\";\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {  // Does stuff before request is sent\r\n  console.log(\"Intercepting Request\");\r\n\r\n  const token = TokenService.getAccessToken();\r\n  if (token) {\r\n    // config.headers[\"Authorization\"] = 'Bearer ' + token;\r\n    config.headers[\"x-access-token\"] = 'Bearer ' + token; // for Express back-end\r\n  }\r\n\r\n  return config;\r\n}, (error) => {\r\n  console.log(\"Interceptor Request Error\");\r\n  return Promise.reject(error);\r\n});\r\n\r\naxiosInstance.interceptors.response.use(function(response) { // Any status code within the range of 2xx triggers this function\r\n  return response;\r\n}, function(err) { // Any status codes that falls outside the range of 2xx triggers this function\r\n  const originalRequest = err.config;\r\n\r\n  if (originalRequest.url !== \"/authenticate/login\" && err.response) { // excludes response errors from unsuccessful login attempts\r\n    // Access Token was expired\r\n    if (err.response.status === 401 && originalRequest.url === (API_URL + '/authenticate/token')) { // 401 when no refreshToken is sent)\r\n      // TO DO: Redirect to login page upon unsuccessfully refreshing token (try using history package or context api)\r\n      return Promise.reject(err);\r\n    }\r\n    \r\n    if (err.response.status === 403 && !originalRequest._retry) { // api sends status 403 when accessToken can't be verified\r\n      originalRequest._retry = true; // retry flag ensures that this interceptor doesn't infinitely retry requesting for a new access token\r\n\r\n      const refreshToken = TokenService.getRefreshToken();\r\n      return axiosInstance.post('/authenticate/token', { \"token\": refreshToken }) // backend expects body with \"token\" property\r\n        .then(res => {\r\n          if (res.status === 201) { // status 201 because new resource was made (i.e. new access token)\r\n            const { accessToken } = res.data;\r\n            TokenService.updateAccessToken(accessToken);\r\n\r\n            axiosInstance.defaults.headers.common['x-access-token'] = 'Bearer ' + TokenService.getAccessToken(); // access token is a bearer-type token\r\n            return axiosInstance(originalRequest); // re-attempts original request now with the new access token\r\n          }\r\n        }).catch((_error) => {\r\n          return Promise.reject(_error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return Promise.reject(err);\r\n});\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}