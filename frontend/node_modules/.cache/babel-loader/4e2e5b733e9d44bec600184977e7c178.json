{"ast":null,"code":"// TODO: figure out where to store accessToken besides in localStorage (possibly in cookie) to improve security\nconst getRefreshToken = () => {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  return user === null || user === void 0 ? void 0 : user.refreshToken;\n};\n\nconst getAccessToken = () => {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  return user === null || user === void 0 ? void 0 : user.accessToken;\n};\n\nconst updateAccessToken = token => {\n  // TODO: update this so that updated access token is stored in a cookie\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n  user.accessToken = token;\n  localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\nconst getUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nconst setUser = user => {\n  // TODO: update this so that initial access token is stored in a cookie\n  console.log(\"In TokenService:\", JSON.stringify(user));\n  localStorage.setItem(\"user\", JSON.stringify(user)); // localStorage.setItem(\"user\", JSON.stringify(response.data.refreshToken));\n};\n\nconst removeUser = () => {\n  // TODO: update this so that access token is deleted from wherever it is stored\n  localStorage.removeItem(\"user\");\n};\n\nconst TokenService = {\n  getRefreshToken,\n  getAccessToken,\n  updateAccessToken,\n  getUser,\n  setUser,\n  removeUser\n};\nexport default TokenService;","map":{"version":3,"sources":["/mnt/c/Users/frenk/Documents/GitHub/Fantasy-Basketball-Helper-App/frontend/src/services/token.service.js"],"names":["getRefreshToken","user","JSON","parse","localStorage","getItem","refreshToken","getAccessToken","accessToken","updateAccessToken","token","setItem","stringify","getUser","setUser","console","log","removeUser","removeItem","TokenService"],"mappings":"AAAA;AAEA,MAAMA,eAAe,GAAG,MAAM;AAC5B,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,SAAOJ,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEK,YAAb;AACD,CAHD;;AAKA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMN,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,SAAOJ,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEO,WAAb;AACD,CAHD;;AAKA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAE;AACrC,MAAIT,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAX;AACAJ,EAAAA,IAAI,CAACO,WAAL,GAAmBE,KAAnB;AACAN,EAAAA,YAAY,CAACO,OAAb,CAAqB,MAArB,EAA6BT,IAAI,CAACU,SAAL,CAAeX,IAAf,CAA7B;AACD,CAJD;;AAMA,MAAMY,OAAO,GAAG,MAAM;AACpB,SAAOX,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,CAFD;;AAIA,MAAMS,OAAO,GAAIb,IAAD,IAAU;AAAE;AAC1Bc,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCd,IAAI,CAACU,SAAL,CAAeX,IAAf,CAAhC;AACAG,EAAAA,YAAY,CAACO,OAAb,CAAqB,MAArB,EAA6BT,IAAI,CAACU,SAAL,CAAeX,IAAf,CAA7B,EAFwB,CAGxB;AACD,CAJD;;AAMA,MAAMgB,UAAU,GAAG,MAAM;AAAE;AACzBb,EAAAA,YAAY,CAACc,UAAb,CAAwB,MAAxB;AACD,CAFD;;AAKA,MAAMC,YAAY,GAAG;AACnBnB,EAAAA,eADmB;AAEnBO,EAAAA,cAFmB;AAGnBE,EAAAA,iBAHmB;AAInBI,EAAAA,OAJmB;AAKnBC,EAAAA,OALmB;AAMnBG,EAAAA;AANmB,CAArB;AASA,eAAeE,YAAf","sourcesContent":["// TODO: figure out where to store accessToken besides in localStorage (possibly in cookie) to improve security\r\n\r\nconst getRefreshToken = () => {\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  return user?.refreshToken;\r\n};\r\n\r\nconst getAccessToken = () => {\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  return user?.accessToken;\r\n};\r\n\r\nconst updateAccessToken = (token) => { // TODO: update this so that updated access token is stored in a cookie\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n  user.accessToken = token;\r\n  localStorage.setItem(\"user\", JSON.stringify(user));\r\n};\r\n\r\nconst getUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nconst setUser = (user) => { // TODO: update this so that initial access token is stored in a cookie\r\n  console.log(\"In TokenService:\", JSON.stringify(user));\r\n  localStorage.setItem(\"user\", JSON.stringify(user));\r\n  // localStorage.setItem(\"user\", JSON.stringify(response.data.refreshToken));\r\n};\r\n\r\nconst removeUser = () => { // TODO: update this so that access token is deleted from wherever it is stored\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\n\r\nconst TokenService = {\r\n  getRefreshToken,\r\n  getAccessToken,\r\n  updateAccessToken,\r\n  getUser,\r\n  setUser,\r\n  removeUser,\r\n};\r\n\r\nexport default TokenService;"]},"metadata":{},"sourceType":"module"}