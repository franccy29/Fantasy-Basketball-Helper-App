{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/frenk/Documents/GitHub/Fantasy-Basketball-Helper-App/frontend/src/components/statCards/LastWeekRadar.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\nimport React, { useState } from \"react\";\nimport { VictoryArea, VictoryChart, VictoryGroup, VictoryLabel, VictoryLegend, VictoryPolarAxis, VictoryTheme } from \"victory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getMaxima = data => {\n  const groupedData = Object.keys(data[0]).reduce((memo, key) => {\n    memo[key] = data.map(d => d[key]);\n    return memo;\n  }, {});\n  return Object.keys(groupedData).reduce((memo, key) => {\n    memo[key] = Math.max(...groupedData[key]);\n    return memo;\n  }, {});\n};\n\nconst processData = data => {\n  const maxByGroup = getMaxima(data);\n\n  const makeDataArray = d => {\n    return Object.keys(d).map(key => {\n      return {\n        x: key,\n        y: d[key] / maxByGroup[key]\n      };\n    });\n  };\n\n  return data.map(datum => makeDataArray(datum));\n};\n\nexport default function LastWeekRadar(props) {\n  _s();\n\n  console.log(props.pastWeekData);\n  console.log(props.seasonStats);\n  const characterData = [{\n    points: Math.round(props.pastWeekData.lastWeekPoints),\n    assists: Math.round(props.pastWeekData.lastWeekAssists),\n    rebounds: Math.round(props.pastWeekData.lastWeekOffensiveRebounds) + Math.round(props.pastWeekData.lastWeekDefensiveRebounds),\n    blocks: Math.round(props.pastWeekData.lastWeekBlockedShots),\n    steals: Math.round(props.pastWeekData.lastWeekSteals)\n  }, {\n    points: Math.round(props.seasonStats.points / props.seasonStats.games),\n    assists: Math.round(props.seasonStats.assists / props.seasonStats.games),\n    rebounds: Math.round(props.seasonStats.rebounds / props.seasonStats.games),\n    blocks: Math.round(props.seasonStats.blockedshots / props.seasonStats.games),\n    steals: Math.round(props.seasonStats.steals / props.seasonStats.games)\n  }];\n  const [state, setState] = useState({\n    data: processData(characterData),\n    maxima: getMaxima(characterData)\n  });\n  return /*#__PURE__*/_jsxDEV(VictoryChart, {\n    height: \"300\",\n    polar: true,\n    padding: {\n      top: 25,\n      bottom: 25,\n      right: 0,\n      left: 20\n    } // theme={VictoryTheme.material}\n    ,\n    domain: {\n      y: [0, 1]\n    },\n    children: [/*#__PURE__*/_jsxDEV(VictoryLegend, {\n      x: 20,\n      y: -5,\n      title: \"Past Week vs Season\",\n      itemsPerRow: 1,\n      orientation: \"horizontal\",\n      gutter: 20,\n      style: {\n        border: {\n          stroke: \"none\"\n        },\n        title: {\n          fontSize: 20,\n          fill: \"white\",\n          textDecoration: \"underline\"\n        }\n      },\n      data: [{\n        name: \"Past Week\",\n        symbol: {\n          fill: \"gold\"\n        },\n        labels: {\n          fill: \"white\"\n        }\n      }, {\n        name: \"Season\",\n        symbol: {\n          fill: \"green\"\n        },\n        labels: {\n          fill: \"white\"\n        }\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VictoryGroup, {\n      colorScale: [\"gold\", \"green\"],\n      style: {\n        data: {\n          fillOpacity: 0.2,\n          strokeWidth: 2\n        }\n      },\n      children: state.data.map((data, i) => {\n        return /*#__PURE__*/_jsxDEV(VictoryArea, {\n          data: data\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), Object.keys(state.maxima).map((key, i) => {\n      return /*#__PURE__*/_jsxDEV(VictoryPolarAxis, {\n        dependentAxis: true,\n        style: {\n          axisLabel: {\n            padding: 10,\n            fill: \"white\",\n            fontSize: 20\n          },\n          axis: {\n            stroke: \"none\"\n          },\n          grid: {\n            stroke: \"white\",\n            strokeWidth: 0.25,\n            opacity: 0.5\n          }\n        },\n        tickLabelComponent: /*#__PURE__*/_jsxDEV(VictoryLabel, {\n          labelPlacement: \"vertical\",\n          style: {\n            fill: \"white\",\n            opacity: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this),\n        labelPlacement: \"perpendicular\",\n        axisValue: i + 1,\n        label: key,\n        tickFormat: t => Math.ceil(t * state.maxima[key]),\n        tickValues: [0.25, 0.5, 0.75]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(VictoryPolarAxis, {\n      labelPlacement: \"parallel\",\n      tickFormat: () => \"\",\n      style: {\n        axis: {\n          stroke: \"none\"\n        },\n        grid: {\n          stroke: \"white\",\n          opacity: 0.5\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LastWeekRadar, \"F70KC24g5+sozCtSOCHP421oe0w=\");\n\n_c = LastWeekRadar;\n\nvar _c;\n\n$RefreshReg$(_c, \"LastWeekRadar\");","map":{"version":3,"sources":["/mnt/c/Users/frenk/Documents/GitHub/Fantasy-Basketball-Helper-App/frontend/src/components/statCards/LastWeekRadar.jsx"],"names":["React","useState","VictoryArea","VictoryChart","VictoryGroup","VictoryLabel","VictoryLegend","VictoryPolarAxis","VictoryTheme","getMaxima","data","groupedData","Object","keys","reduce","memo","key","map","d","Math","max","processData","maxByGroup","makeDataArray","x","y","datum","LastWeekRadar","props","console","log","pastWeekData","seasonStats","characterData","points","round","lastWeekPoints","assists","lastWeekAssists","rebounds","lastWeekOffensiveRebounds","lastWeekDefensiveRebounds","blocks","lastWeekBlockedShots","steals","lastWeekSteals","games","blockedshots","state","setState","maxima","top","bottom","right","left","border","stroke","title","fontSize","fill","textDecoration","name","symbol","labels","fillOpacity","strokeWidth","i","axisLabel","padding","axis","grid","opacity","t","ceil"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport React, { useState } from \"react\";\r\nimport { VictoryArea, VictoryChart, VictoryGroup, VictoryLabel, VictoryLegend, VictoryPolarAxis, VictoryTheme } from \"victory\";\r\n\r\n\r\nconst getMaxima = (data) => {\r\n  const groupedData = Object.keys(data[0]).reduce((memo, key) => {\r\n    memo[key] = data.map((d) => d[key]);\r\n    return memo;\r\n  }, {});\r\n  return Object.keys(groupedData).reduce((memo, key) => {\r\n    memo[key] = Math.max(...groupedData[key]);\r\n    return memo;\r\n  }, {});\r\n};\r\n\r\nconst processData = (data) => {\r\n  const maxByGroup = getMaxima(data);\r\n  const makeDataArray = (d) => {\r\n    return Object.keys(d).map((key) => {\r\n      return { x: key, y: d[key] / maxByGroup[key] };\r\n    });\r\n  };\r\n  return data.map((datum) => makeDataArray(datum));\r\n};\r\n\r\nexport default function LastWeekRadar(props) {\r\n  console.log(props.pastWeekData);\r\n  console.log(props.seasonStats);\r\n  const characterData = [\r\n    {\r\n      points: Math.round(props.pastWeekData.lastWeekPoints),\r\n      assists: Math.round(props.pastWeekData.lastWeekAssists),\r\n      rebounds: (Math.round(props.pastWeekData.lastWeekOffensiveRebounds) + Math.round(props.pastWeekData.lastWeekDefensiveRebounds)),\r\n      blocks: Math.round(props.pastWeekData.lastWeekBlockedShots),\r\n      steals: Math.round(props.pastWeekData.lastWeekSteals)\r\n    },\r\n    {\r\n      points: Math.round(props.seasonStats.points / props.seasonStats.games),\r\n      assists: Math.round(props.seasonStats.assists / props.seasonStats.games),\r\n      rebounds: Math.round(props.seasonStats.rebounds / props.seasonStats.games),\r\n      blocks: Math.round(props.seasonStats.blockedshots / props.seasonStats.games),\r\n      steals: Math.round(props.seasonStats.steals / props.seasonStats.games)\r\n    }\r\n  ];\r\n  const [state, setState] = useState({\r\n    data: processData(characterData),\r\n    maxima: getMaxima(characterData)\r\n  });\r\n  \r\n\r\n  return (\r\n    <VictoryChart height=\"300\" polar padding={{ top: 25, bottom: 25, right: 0, left: 20 }}\r\n      // theme={VictoryTheme.material}\r\n      domain={{ y: [ 0, 1 ] }}\r\n    >\r\n      <VictoryLegend x={20} y={-5}\r\n        title=\"Past Week vs Season\"\r\n        itemsPerRow={1}\r\n        orientation=\"horizontal\"\r\n        gutter={20}\r\n        style={{ border: { stroke: \"none\" }, title: {fontSize: 20, fill: \"white\", textDecoration:\"underline\" } }}\r\n        data={[\r\n          { name: \"Past Week\", symbol: { fill: \"gold\" }, labels: { fill: \"white\" } }, { name: \"Season\", symbol: { fill: \"green\" }, labels: { fill: \"white\" } }\r\n        ]}\r\n      />\r\n      <VictoryGroup colorScale={[\"gold\", \"green\"]}\r\n        style={{ data: { fillOpacity: 0.2, strokeWidth: 2 } }}\r\n      >\r\n        {state.data.map((data, i) => {\r\n          return <VictoryArea key={i} data={data}/>;\r\n        })}\r\n      </VictoryGroup>\r\n      {\r\n        Object.keys(state.maxima).map((key, i) => {\r\n          return (\r\n            <VictoryPolarAxis key={i} dependentAxis\r\n              style={{\r\n                axisLabel: { padding: 10, fill: \"white\", fontSize: 20 },\r\n                axis: { stroke: \"none\" },\r\n                grid: { stroke: \"white\", strokeWidth: 0.25, opacity: 0.5 }\r\n              }}\r\n              tickLabelComponent={\r\n                <VictoryLabel labelPlacement=\"vertical\" style={{ fill: \"white\", opacity: 1 }} />\r\n              }\r\n              labelPlacement=\"perpendicular\"\r\n              axisValue={i + 1} label={key}\r\n              tickFormat={(t) => Math.ceil(t * state.maxima[key])}\r\n              tickValues={[0.25, 0.5, 0.75]}\r\n            />\r\n          );\r\n        })\r\n      }\r\n      <VictoryPolarAxis\r\n        labelPlacement=\"parallel\"\r\n        tickFormat={() => \"\"}\r\n        style={{\r\n          axis: { stroke: \"none\" },\r\n          grid: { stroke: \"white\", opacity: 0.5 }\r\n        }}\r\n      />\r\n\r\n    </VictoryChart>\r\n  );\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}